{
 "code": "606060405260018054600160a060020a0319166c0100000000000000000000000033810204179055611565806100356000396000f3606060405236156100f05760e060020a6000350463193ab82981146100f557806323dacd6c1461015357806332a841b3146101ac57806336eed01f1461022f5780634db234981461025c57806358d7fa69146102f15780636c0b2fa71461031d57806373c8b53e1461037857806382ea84a3146103cf57806387ab8403146103de578063893d20e814610451578063921fb8901461046a578063967e6e65146104c357806399a6a674146104d3578063aecf214914610550578063c3b81e2214610579578063d3962239146105fb578063d5dcf12714610613578063db1970f414610669578063eee02e61146106c0575b610002565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526106d895833595939460449493929092019181908401838280828437509496505093359350505050600061076d835b6020015190565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526106d8958335959394604494939290920191819084018382808284375094965050505050505060006109218261014c565b34610002576106da60043560408051602081810183526000808352600160a060020a0385168152600482528390206003018054845181840281018401909552808552929392909183018282801561022357602002820191906000526020600020905b8154815260019091019060200180831161020e575b50505050509050610257565b3461000257610724600435600160a060020a0381166000908152600460205260409020600201545b919050565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526106d89583359593946044949392909201918190840183828082843750949650505050505050600160a060020a03821660009081526005602052604090206003018054600181018083558281838015829011610a6657600083815260209020610a669181019083016109af565b3461000257610724600435600160a060020a038116600090815260056020526040902060020154610257565b34610002576106d8600435610a81815b6000805b6008548110156115425782600160a060020a0316600860005082815481101561000257600091825260209091200154600160a060020a031614156115555760019150611547565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526106d89583359593946044949392909201918190840183828082843750949650505050505050610c068161014c565b34610002576107246002545b90565b34610002576106d8600435602435604435606435604080516020810190915260008152610c94835b6000805b6007548110156115425782600160a060020a0316600760005082815481101561000257600091825260209091200154600160a060020a0316141561155d5760019150611547565b3461000257610736600154600160a060020a03166103db565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526106d895833595939460449493929092019181908401838280828437509496505050505050506000610f478261014c565b34610002576107246000546103db565b34610002576106d86004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050506009805460018101808355828183801582901161114a5760008381526020902061114a9181019083016109af565b34610002576106d860043560243560015433600160a060020a0390811691161461120257610002565b34610002576106da60043560408051602081810183526000808352600160a060020a0385168152600582528390206003018054845181840281018401909552808552929392909183018282801561022357602002820191906000526020600020908154815260019091019060200180831161020e575b50505050509050610257565b34610002576107526004356000600061134383610406565b346100025760043560008190556040805133600160a060020a031681526020810183905281516106d893927fc890294a68097562641143813b7ae9e39c85e43d49eefd10381cb4458c0ebcf5928290030190a150565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526106d8958335959394604494939290920191819084018382808284375094965050505050505061137982610406565b3461000257610752600435600060006115188361032d565b005b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019250505060405180910390f35b60408051918252519081900360200190f35b60408051600160a060020a039092168252519081900360200190f35b60408051921515835260208301919091528051918290030190f35b90506107ad815b6000805b6009548110156115425760098054849190839081101561000257600091825260209091200154141561154d5760019150611547565b151561086557600081815260066020908152604091829020838155600180820186905560029091018054600160a060020a031916606060020a898102041790558251600160a060020a03331681529182015260608183018190526012908201527fe5889be5bbbae59586e59381e68890e58a9f0000000000000000000000000000608082015290517f6c0fff554d553c99fbc0021e11c35ca4137838696d38e2c70de9c2c92794556c9160a0908290030190a1610903565b60408051600160a060020a0333168152600060208201526060818301819052602d908201527fe8afa5e4bbb6e59586e59381e5b7b2e7bb8fe6b7bbe58aa0efbc8ce8afb7e7a160808201527faee8aea4e5908ee6938de4bd9c0000000000000000000000000000000000000060a082015290517f6c0fff554d553c99fbc0021e11c35ca4137838696d38e2c70de9c2c92794556c9181900360c00190a15b50505050565b5050506000928352506020909120018190555b505050565b600081815260066020908152604080832060018082018054600160a060020a03808c168089526004808952878a2060028082018054969096039095559454968401549092168952600588529588209091018054909401909355929094529091526003018054918201808255929350918281838015829011610909576000838152602090206109099181019083015b808211156109c357600081556001016109af565b5090565b909155505060408051600160a060020a0333168152602081018290526024818301527fe6b7bbe58aa0e588b0e59586e688b7e79a84e59586e59381e695b0e7bb84e68860608201527f90e58a9f00000000000000000000000000000000000000000000000000000000608082015290517fad3e58dfd5b5c6f48b817ce7c2fc3155aaa1af79c9ffd57c7a1e64ad6fbb31239181900360a00190a15b5050565b5050509190906000526020600020900160006109c78461014c565b1515610ae557600160a060020a03811660009081526005602052604090208054600160a060020a031916606060020a8084020417905560088054600181018083558281838015829011610b6057600083815260209020610b609181019083016109af565b60408051600160a060020a03331681526000602082015260608183018190526015908201527fe8afa5e8b4a6e688b7e5b7b2e7bb8fe6b3a8e5868c0000000000000000000000608082015290517f0e65ebfe2c82306ac02d8c74509cb6d3e528fe1ba925431a28da1e952281abe99181900360a00190a15b50565b505050600092835250602091829020018054600160a060020a031916606060020a848102041790556040805133600160a060020a031681526001928101929092526060828201819052600c908301527fe6b3a8e5868ce68890e58a9f00000000000000000000000000000000000000006080830152517f0e65ebfe2c82306ac02d8c74509cb6d3e528fe1ba925431a28da1e952281abe99160a0908290030190a1610b5d565b600160a060020a038084166000908152600560209081526040918290206001019390935580513390921682529181018290526012818301527fe8aebee7bdaee5af86e7a081e68890e58a9f0000000000000000000000000000606082015290517f4327d8a1e677908b7d1af3765425efc3b62da74f7aa441ac960b4ee1534b59f69181900360800190a15050565b158015610ca75750610ca58361032d565b155b15610d465760408051600160a060020a0333168152602081018290526030818301527fe79baee79a84e8b4a6e688b7e4b88de5ad98e59ca8efbc8ce8afb7e7a1aee8ae60608201527fa4e5908ee5868de8bdace7a7bbefbc8100000000000000000000000000000000608082015290517f5035976aa5a48cc59b063e79fbfa43e8ed567d91fc854822c646f0470529dd4a9181900360a00190a1610e7f565b841515610d9b57600160a060020a038416600090815260046020526040902060020154829010610de957600160a060020a038416600090815260046020526040902060020180548390039055610e8683610406565b600160a060020a038416600090815260056020526040902060020154829010610de957600160a060020a038416600090815260056020526040902060020180548390039055610e8683610406565b60408051600160a060020a033316815260208101829052602a818301527fe4bda0e79a84e7a7afe58886e4bd99e9a29de4b88de8b6b3efbc8ce8bdace8ae60608201527fa9e5a4b1e8b4a5efbc8100000000000000000000000000000000000000000000608082015290517f5035976aa5a48cc59b063e79fbfa43e8ed567d91fc854822c646f0470529dd4a9181900360a00190a15b5050505050565b15610eb157600160a060020a0383166000908152600460205260409020600201805483019055610ed3565b600160a060020a03831660009081526005602052604090206002018054830190555b60408051600160a060020a0333168152602081018290526015818301527fe7a7afe58886e8bdace8aea9e68890e58a9fefbc810000000000000000000000606082015290517f5035976aa5a48cc59b063e79fbfa43e8ed567d91fc854822c646f0470529dd4a9181900360800190a1610e7f565b9050610f5281610774565b1561102c57600081815260066020908152604080832060010154600160a060020a038716845260049092529091206002015410156110ce5760408051600160a060020a03331681526000602082015260608183018190526021908201527fe4bd99e9a29de4b88de8b6b3efbc8ce8b4ade4b9b0e59586e59381e5a4b1e8b460808201527fa50000000000000000000000000000000000000000000000000000000000000060a082015290517fa638d61cc6fe6f6e523445b498be798f6cd2d1df9be47db6107e802212850d5c9181900360c00190a161091c565b60408051600160a060020a0333168152600060208201526060818301819052602c908201527fe8be93e585a5e59586e593814964e4b88de5ad98e59ca8efbc8ce8afb7e7a1ae60808201527fe5ae9ae5908ee8b4ade4b9b0000000000000000000000000000000000000000060a082015290517fa638d61cc6fe6f6e523445b498be798f6cd2d1df9be47db6107e802212850d5c9181900360c00190a161091c565b60408051600160a060020a03331681526001602082015260608183018190526012908201527fe8b4ade4b9b0e59586e59381e68890e58a9f0000000000000000000000000000608082015290517fa638d61cc6fe6f6e523445b498be798f6cd2d1df9be47db6107e802212850d5c9181900360a00190a161091c565b5050509190906000526020600020900160006111658461014c565b909155505060408051600160a060020a0333168152602081018290526021818301527fe6b7bbe58aa0e588b0e585a8e5b180e59586e59381e695b0e7bb84e68890e58a60608201527f9f00000000000000000000000000000000000000000000000000000000000000608082015290517f37eb948c4e01d1bb642a2a4b97681f071846ee55d7898ef365f132b9d74529439181900360a00190a150565b61120b82610406565b156112a9576002805482018155600160a060020a0380841660009081526004602090815260409182902090930180548501905580513390921682529181018290526012818301527fe58f91e8a18ce7a7afe58886e68890e58a9f0000000000000000000000000000606082015290517f1085e80f1c104f322185083fe0ba65ddf4ea2040fcb9ad9fdd689ed4ccd5b8b39181900360800190a1610a62565b60408051600160a060020a0333168152602081018290526027818301527fe8afa5e8b4a6e688b7e69caae6b3a8e5868cefbc8ce58f91e8a18ce7a7afe58860608201527f86e5a4b1e8b4a500000000000000000000000000000000000000000000000000608082015290517f1085e80f1c104f322185083fe0ba65ddf4ea2040fcb9ad9fdd689ed4ccd5b8b39181900360a00190a1610a62565b1561136d575050600160a060020a0381166000908152600460205260409020600190810154611374565b5060009050805b915091565b15156113b857600160a060020a03821660009081526004602052604090208054600160a060020a031916606060020a8085020417905561142c8161014c565b60408051600160a060020a0333168152602081018290526015818301527fe8afa5e8b4a6e688b7e5b7b2e7bb8fe6b3a8e5868c0000000000000000000000606082015290517f03945a4b71f6bae73fb43e650538e4ce700147bd742b006557d2a400c60ca2bc9181900360800190a1610a62565b600160a060020a038316600090815260046020526040902060019081019190915560078054918201808255909190828183801582901161147d5760008381526020902061147d9181019083016109af565b505050600092835250602091829020018054600160a060020a031916606060020a858102041790556040805133600160a060020a03168152918201819052600c828201527fe6b3a8e5868ce68890e58a9f00000000000000000000000000000000000000006060830152517f03945a4b71f6bae73fb43e650538e4ce700147bd742b006557d2a400c60ca2bc916080908290030190a1610a62565b1561136d575050600160a060020a0381166000908152600560205260409020600190810154611374565b600091505b50919050565b600101610778565b600101610331565b60010161040a56",
 "info": {
  "source": "pragma solidity ^0.4.2;\n\n//测试类：该合约不需要迁移\n//供外部调用测试交易方法、常量方法、event的使用\ncontract Test {\n    uint age;\n\n    event SetAge(address sender, uint age);\n    function setAge(uint _age) {\n        age = _age;\n        SetAge(msg.sender, age);\n    }\n\n    function getAge()constant returns(uint) {\n        return age;\n    }\n}\n\n//工具类：该合约不需要迁移\ncontract Utils {\n\n    function stringToBytes32(string memory source)constant internal returns (bytes32 result) {\n    assembly {\n        result := mload(add(source, 32))\n      }\n    }\n\n    function bytes32ToString(bytes32 x)constant internal returns (string) {\n    bytes memory bytesString = new bytes(32);\n    uint charCount = 0;\n    for (uint j = 0; j < 32; j++) {\n        byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n        if (char != 0) {\n            bytesString[charCount] = char;\n            charCount++;\n        }\n    }\n    bytes memory bytesStringTrimmed = new bytes(charCount);\n    for (j = 0; j < charCount; j++) {\n        bytesStringTrimmed[j] = bytesString[j];\n    }\n    return string(bytesStringTrimmed);\n    }\n\n}\n\n//主合约：该合约需要迁移\ncontract Score is Utils, Test {\n\n    address owner; //合约的拥有者，银行\n    uint issuedScoreAmount; //银行已经发行的积分总数\n    uint settledScoreAmount; //银行已经清算的积分总数\n\n    struct Customer {\n        address customerAddr; //客户address\n        bytes32 password; //客户密码\n        uint scoreAmount; //积分余额\n        bytes32[] buyGoods; //购买的商品数组\n    }\n\n    struct Merchant {\n        address merchantAddr; //商户address\n        bytes32 password; //商户密码\n        uint scoreAmount; //积分余额\n        bytes32[] sellGoods; //发布的商品数组\n    }\n\n    struct Good {\n        bytes32 goodId; //商品Id;\n        uint price; //价格；\n        address belong; //商品属于哪个商户address；\n    }\n\n    mapping (address=>Customer) customer; \n    mapping (address=>Merchant) merchant; \n    mapping (bytes32=>Good) good; //根据商品Id查找该件商品\n\n    address[] customers; //已注册的客户数组\n    address[] merchants; //已注册的商户数组\n    bytes32[] goods; //已经上线的商品数组\n\n    //增加权限控制，某些方法只能由合约的创建者调用\n    modifier onlyOwner(){\n        if(msg.sender != owner) throw;\n        _;\n    }\n\n    //构造函数\n    function Score() {\n        owner = msg.sender;\n    }\n\n    //返回合约调用者地址\n    function getOwner() constant returns(address) {\n        return owner;\n    }\n\n    //注册一个客户\n    event RegisterCustomer(address sender, string message);\n    function registerCustomer(address _customerAddr, string _password) {\n\n        //判断是否已经注册\n        if(!isCustomerAlreadyRegister(_customerAddr)) {\n            //还未注册\n            customer[_customerAddr].customerAddr = _customerAddr;\n            customer[_customerAddr].password = stringToBytes32(_password);\n            customers.push(_customerAddr);\n            RegisterCustomer(msg.sender, \"注册成功\");\n            return;\n        }\n        else {\n            RegisterCustomer(msg.sender, \"该账户已经注册\");\n            return;\n        }\n    }\n\n    //注册一个商户\n    event NewMerchant(address sender, bool isSuccess, string message);\n    function newMerchant(address _merchantAddr) {\n\n        //判断是否已经注册\n        if(!isMerchantAlreadyRegister(_merchantAddr)) {\n            //还未注册\n            merchant[_merchantAddr].merchantAddr = _merchantAddr;\n            merchants.push(_merchantAddr);\n            NewMerchant(msg.sender, true, \"注册成功\");\n            return;\n        }\n        else {\n            NewMerchant(msg.sender, false, \"该账户已经注册\");\n            return;\n        }\n    }\n\n    //判断一个客户是否已经注册\n    function isCustomerAlreadyRegister(address _customerAddr)internal returns(bool) {\n        for(uint i = 0; i < customers.length; i++) {\n            if(customers[i] == _customerAddr) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //判断一个商户是否已经注册\n    function isMerchantAlreadyRegister(address _merchantAddr)internal returns(bool) {\n        for(uint i = 0; i < merchants.length; i++) {\n            if(merchants[i] == _merchantAddr) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //设置商户密码\n    event SetMerchantPassword(address sender, string message);\n    function setMerchantPassword(address _merchantAddr, string _password) {\n        merchant[_merchantAddr].password = stringToBytes32(_password);\n        SetMerchantPassword(msg.sender, \"设置密码成功\");\n    }\n\n    //查询用户密码\n    function getCustomerPassword(address _customerAddr)constant returns(bool, bytes32) {\n        //先判断该用户是否注册\n        if(isCustomerAlreadyRegister(_customerAddr)) {\n            return (true, customer[_customerAddr].password);\n        }\n        else {\n            return(false, \"\");\n        }\n    }\n\n    //查询商户密码\n    function getMerchantPassword(address _merchantAddr)constant returns(bool, bytes32) {\n        //先判断该商户是否注册\n        if(isMerchantAlreadyRegister(_merchantAddr)) {\n            return (true, merchant[_merchantAddr].password);\n        }\n        else {\n            return(false, \"\");\n        }\n    }\n\n    //银行发送积分给客户,只能被银行调用，且只能发送给客户\n    event SendScoreToCustomer(address sender, string message);\n    function sendScoreToCustomer(address _receiver, \n        uint _amount)onlyOwner {\n\n        if(isCustomerAlreadyRegister(_receiver)) {\n            //已经注册\n            issuedScoreAmount += _amount;\n            customer[_receiver].scoreAmount += _amount;\n            SendScoreToCustomer(msg.sender, \"发行积分成功\");\n            return;\n        }\n        else {\n            //还没注册\n            SendScoreToCustomer(msg.sender, \"该账户未注册，发行积分失败\");\n            return;\n        }\n    }\n\n    //根据客户address查找余额\n    function getScoreWithCustomerAddr(address customerAddr)constant returns(uint) {\n        return customer[customerAddr].scoreAmount;\n    }\n\n    //根据商户address查找余额\n    function getScoreWithMerchantAddr(address merchantAddr)constant returns(uint) {\n        return merchant[merchantAddr].scoreAmount;\n    }\n\n    //两个账户转移积分，任意两个账户之间都可以转移，客户商户都调用该方法\n    //_senderType表示调用者类型，0表示客户，1表示商户\n    event TransferScoreToAnother(address sender, string message);\n    function transferScoreToAnother(uint _senderType, \n        address _sender, \n        address _receiver, \n        uint _amount) {\n        string memory message;\n        if(!isCustomerAlreadyRegister(_receiver) && !isMerchantAlreadyRegister(_receiver)) {\n            //目的账户不存在\n            TransferScoreToAnother(msg.sender, \"目的账户不存在，请确认后再转移！\");\n            return;\n        }\n        if(_senderType == 0) {\n            //客户转移\n            if(customer[_sender].scoreAmount >= _amount) {\n                customer[_sender].scoreAmount -= _amount;\n        \n                if(isCustomerAlreadyRegister(_receiver)) {\n                    //目的地址是客户\n                    customer[_receiver].scoreAmount += _amount;\n                }else {\n                    merchant[_receiver].scoreAmount += _amount;\n                }\n                TransferScoreToAnother(msg.sender, \"积分转让成功！\");\n                return;\n          }else {\n                TransferScoreToAnother(msg.sender, \"你的积分余额不足，转让失败！\");\n                return;\n          }\n        }else {\n            //商户转移\n            if(merchant[_sender].scoreAmount >= _amount) {\n                merchant[_sender].scoreAmount -= _amount;\n                if(isCustomerAlreadyRegister(_receiver)) {\n                    //目的地址是客户\n                    customer[_receiver].scoreAmount += _amount;\n                }else {\n                    merchant[_receiver].scoreAmount += _amount;\n                }\n                TransferScoreToAnother(msg.sender, \"积分转让成功！\");\n                return;\n            }else {\n                 TransferScoreToAnother(msg.sender, \"你的积分余额不足，转让失败！\");\n                 return;\n            }\n        }\n    }\n\n    //银行查找已经发行的积分总数\n    function getIssuedScoreAmount()constant returns(uint) {\n        return issuedScoreAmount;\n    }\n\n    //（1）商户添加一件商品:（1）（2）（3）方法分拆解决out of gas\n    event AddGood(address sender, bool isSuccess, string message);\n    function addGood(address _merchantAddr, string _goodId, uint _price) {\n        bytes32 tempId = stringToBytes32(_goodId);\n\n        //首先判断该商品Id是否已经存在\n        if(!isGoodAlreadyAdd(tempId)) {\n            good[tempId].goodId = tempId;\n            good[tempId].price = _price;\n            good[tempId].belong = _merchantAddr;\n            AddGood(msg.sender, true, \"创建商品成功\");\n            return;\n        }\n        else {\n            AddGood(msg.sender, false, \"该件商品已经添加，请确认后操作\");\n            return;\n        }\n    }\n\n    //（2）商户添加一件商品\n    event PutGoodToArray(address sender, string message);\n    function putGoodToArray(string _goodId) {\n        goods.push(stringToBytes32(_goodId));  \n        PutGoodToArray(msg.sender, \"添加到全局商品数组成功\");\n    }\n\n    //（3）商户添加一件商品\n    event PutGoodToMerchant(address sender, string message);\n    function putGoodToMerchant(address _merchantAddr, string _goodId) {\n         merchant[_merchantAddr].sellGoods.push(stringToBytes32(_goodId)); \n         PutGoodToMerchant(msg.sender, \"添加到商户的商品数组成功\");\n    }\n\n    //商户查找自己的商品数组\n    function getGoodsByMerchant(address _merchantAddr)constant returns(bytes32[]) {\n        return merchant[_merchantAddr].sellGoods;\n    }\n\n    //（1）用户用积分购买一件商品,拆分方法，解决out of gas\n    event BuyGood(address sender, bool isSuccess, string message);\n    function buyGood(address _customerAddr, string _goodId) {\n        //首先判断输入的商品Id是否存在\n        bytes32 tempId = stringToBytes32(_goodId);\n        if(isGoodAlreadyAdd(tempId)) {\n            //该件商品已经添加，可以购买\n            if(customer[_customerAddr].scoreAmount < good[tempId].price) {\n                BuyGood(msg.sender, false, \"余额不足，购买商品失败\");\n                return;\n            }\n            else {\n                //对这里的方法抽取      \n                BuyGood(msg.sender, true, \"购买商品成功\");\n                return;\n            }\n        }\n        else {\n            //没有这个Id的商品\n            BuyGood(msg.sender, false, \"输入商品Id不存在，请确定后购买\");\n            return;\n        }\n    }\n\n    //（2）对上面buyGood()方法的拆分\n    function buyGoodSuccess(address _customerAddr, string _goodId) {\n         bytes32 tempId = stringToBytes32(_goodId);\n         customer[_customerAddr].scoreAmount -= good[tempId].price;\n         merchant[good[tempId].belong].scoreAmount += good[tempId].price;\n         customer[_customerAddr].buyGoods.push(tempId);\n    }\n\n    //客户查找自己的商品数组\n    function getGoodsByCustomer(address _customerAddr)constant returns(bytes32[]) {\n        return customer[_customerAddr].buyGoods;\n    }\n\n    //首先判断输入的商品Id是否存在\n    function isGoodAlreadyAdd(bytes32 _goodId)internal returns(bool) {\n        for(uint i = 0; i < goods.length; i++) {\n            if(goods[i] == _goodId) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n\n\n\n\n\n\n",
  "language": "Solidity",
  "languageVersion": "0",
  "compilerVersion": "0.4.4+commit.4633f3de.Emscripten.clang",
  "abiDefinition": [
   {
    "constant": false,
    "inputs": [
     {
      "name": "_merchantAddr",
      "type": "address"
     },
     {
      "name": "_goodId",
      "type": "string"
     },
     {
      "name": "_price",
      "type": "uint256"
     }
    ],
    "name": "addGood",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_customerAddr",
      "type": "address"
     },
     {
      "name": "_goodId",
      "type": "string"
     }
    ],
    "name": "buyGoodSuccess",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_customerAddr",
      "type": "address"
     }
    ],
    "name": "getGoodsByCustomer",
    "outputs": [
     {
      "name": "",
      "type": "bytes32[]"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "customerAddr",
      "type": "address"
     }
    ],
    "name": "getScoreWithCustomerAddr",
    "outputs": [
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_merchantAddr",
      "type": "address"
     },
     {
      "name": "_goodId",
      "type": "string"
     }
    ],
    "name": "putGoodToMerchant",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "merchantAddr",
      "type": "address"
     }
    ],
    "name": "getScoreWithMerchantAddr",
    "outputs": [
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_merchantAddr",
      "type": "address"
     }
    ],
    "name": "newMerchant",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_merchantAddr",
      "type": "address"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "setMerchantPassword",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getIssuedScoreAmount",
    "outputs": [
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_senderType",
      "type": "uint256"
     },
     {
      "name": "_sender",
      "type": "address"
     },
     {
      "name": "_receiver",
      "type": "address"
     },
     {
      "name": "_amount",
      "type": "uint256"
     }
    ],
    "name": "transferScoreToAnother",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getOwner",
    "outputs": [
     {
      "name": "",
      "type": "address"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_customerAddr",
      "type": "address"
     },
     {
      "name": "_goodId",
      "type": "string"
     }
    ],
    "name": "buyGood",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getAge",
    "outputs": [
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_goodId",
      "type": "string"
     }
    ],
    "name": "putGoodToArray",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_receiver",
      "type": "address"
     },
     {
      "name": "_amount",
      "type": "uint256"
     }
    ],
    "name": "sendScoreToCustomer",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_merchantAddr",
      "type": "address"
     }
    ],
    "name": "getGoodsByMerchant",
    "outputs": [
     {
      "name": "",
      "type": "bytes32[]"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_customerAddr",
      "type": "address"
     }
    ],
    "name": "getCustomerPassword",
    "outputs": [
     {
      "name": "",
      "type": "bool"
     },
     {
      "name": "",
      "type": "bytes32"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_age",
      "type": "uint256"
     }
    ],
    "name": "setAge",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_customerAddr",
      "type": "address"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "registerCustomer",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_merchantAddr",
      "type": "address"
     }
    ],
    "name": "getMerchantPassword",
    "outputs": [
     {
      "name": "",
      "type": "bool"
     },
     {
      "name": "",
      "type": "bytes32"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "inputs": [],
    "type": "constructor"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "RegisterCustomer",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "isSuccess",
      "type": "bool"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "NewMerchant",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "SetMerchantPassword",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "SendScoreToCustomer",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "TransferScoreToAnother",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "isSuccess",
      "type": "bool"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "AddGood",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "PutGoodToArray",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "PutGoodToMerchant",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "isSuccess",
      "type": "bool"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "BuyGood",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "age",
      "type": "uint256"
     }
    ],
    "name": "SetAge",
    "type": "event"
   }
  ],
  "userDoc": {
   "methods": {}
  },
  "developerDoc": {
   "methods": {}
  }
 }
}