{
 "code": "606060405260018054600160a060020a0319166c0100000000000000000000000033810204179055610cce806100356000396000f3606060405236156100775760e060020a60003504632bfbebc3811461007c57806372a804f8146100df57806381f9465614610150578063893d20e8146101eb578063967e6e6514610203578063d5dcf12714610213578063d94c76a214610269578063e18181c814610315578063fe7aa15314610325575b610002565b34610002576103bd6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050506000808080600581610415875b6020015190565b34610002576103e56004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505093359350505050600154600090819033600160a060020a0390811691161461045a57610002565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526103e59583359593946044949392909201918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a019093528282529698976064979196506024919091019450909250829150840183828082843750949650505050505050600060006105c6846100d8565b34610002576103e7600154600160a060020a03165b90565b3461000257610403600054610200565b346100025760043560008190556040805133600160a060020a031681526020810183905281516103e593927fc890294a68097562641143813b7ae9e39c85e43d49eefd10381cb4458c0ebcf5928290030190a150565b346100025760408051602060046024803582810135601f81018590048502860185019096528585526103e59583359593946044949392909201918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897606497919650602491909101945090925082915084018382808284375094965050933593505050506000600060006000610815865b600060006000610c8a846100d8565b3461000257610403600254610200565b34610002576103e56004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496505050505050506000610a9383610306565b60408051600160a060020a039094168452602084019290925282820152519081900360600190f35b005b60408051600160a060020a039092168252519081900360200190f35b60408051918252519081900360200190f35b81526020808201929092526040908101600090812054600160a060020a0390811682526004909352208054600182015460039092015492169790965090945092505050565b610463846100d8565b915061046e84610306565b1561052257506000818152600560209081526040808320546002805487019055600160a060020a039081168085526004845282852060030180548801905582513390921682529281019390935260608382018190526012908401527fe58f91e8a18ce7a7afe58886e68890e58a9f000000000000000000000000000060808401525190917f66e2c8d88cb01a2287c732f9e7cd9bcd951ff8a60f2e7fcaf38fd9b424d45784919081900360a00190a16105c0565b60408051600160a060020a03331681526001602082015260608183018190526027908201527fe8afa5e8b4a6e688b7e69caae6b3a8e5868cefbc8ce58f91e8a18ce7a7afe58860808201527f86e5a4b1e8b4a50000000000000000000000000000000000000000000000000060a082015290517f66e2c8d88cb01a2287c732f9e7cd9bcd951ff8a60f2e7fcaf38fd9b424d457849181900360c00190a15b50505050565b91506105d1836100d8565b90506105dc84610306565b151561069457600160a060020a038516600090815260046020908152604080832080546c01000000000000000000000000808b020473ffffffffffffffffffffffffffffffffffffffff19918216811783556001808401899055600290930187905587865260059094529190932080549091169091179055600880549182018082559091908281838015829011610713576000838152602090206107139181019083015b8082111561077e5760008155600101610680565b60408051600160a060020a03331681526001602082015260608183018190526015908201527fe8afa5e8b4a6e688b7e5b7b2e7bb8fe6b3a8e5868c0000000000000000000000608082015290517fab417f3b6ef24351da0631fd01c896916487aaf213f56c849dec53916c45dd019181900360a00190a15b5050505050565b505050600092835250602090912001805473ffffffffffffffffffffffffffffffffffffffff19166c01000000000000000000000000878102041790556009805460018101808355828183801582901161078257600083815260209020610782918101908301610680565b5090565b505050919090600052602060002090016000508390555060408051600160a060020a0333168152600060208201526060818301819052600c908201527fe6b3a8e5868ce68890e58a9f0000000000000000000000000000000000000000608082015290517fab417f3b6ef24351da0631fd01c896916487aaf213f56c849dec53916c45dd019181900360a00190a161070c565b15156108bd5760408051600160a060020a03331681526001602082015260608183018190526030908201527fe79baee79a84e8b4a6e688b7e4b88de5ad98e59ca8efbc8ce8afb7e7a1aee8ae60808201527fa4e5908ee5868de8bdace7a7bbefbc810000000000000000000000000000000060a082015290517fb80b50d9dbf9dcdf5d67a554d3d49740fd2aa0041e7c954bed8210007f92caf09181900360c00190a16109d7565b6108c6876100d8565b93506108d1866100d8565b92508715156109d757600084815260056020908152604080832054600160a060020a031680845260049092529091206003015490925085901061093957600160a060020a0382166000908152600460205260409020600301805486900390556109e186610306565b60408051600160a060020a0333168152600160208201526060818301819052602a908201527fe4bda0e79a84e7a7afe58886e4bd99e9a29de4b88de8b6b3efbc8ce8bdace8ae60808201527fa9e5a4b1e8b4a5efbc810000000000000000000000000000000000000000000060a082015290517fb80b50d9dbf9dcdf5d67a554d3d49740fd2aa0041e7c954bed8210007f92caf09181900360c00190a15b5050505050505050565b15610a175750600082815260056020908152604080832054600160a060020a031680845260049092529091206003018054860190555b60408051600160a060020a03331681526000602082015260608183018190526015908201527fe7a7afe58886e8bdace8aea9e68890e58a9fefbc810000000000000000000000608082015290517fb80b50d9dbf9dcdf5d67a554d3d49740fd2aa0041e7c954bed8210007f92caf09181900360a00190a16109d7565b15610aa55760056000610b48856100d8565b60408051600160a060020a03331681526001602082015260608183018190526027908201527fe8afa5e794a8e688b7e69caae6b3a8e5868cefbc8ce8afb7e7a1aee8aea4e59060808201527f8ee799bbe5bd950000000000000000000000000000000000000000000000000060a082015290517ffc23bfdd882b7d1ee82396bdc85e1f0fe38822e4a5c63689364cfb811bf21c0f9181900360c00190a15b505050565b81526020808201929092526040908101600090812054600160a060020a031680825260049093522060020154909150610b80836100d8565b1415610c025760408051600160a060020a0333168152600060208201526060818301819052600c908201527fe799bbe5bd95e68890e58a9f0000000000000000000000000000000000000000608082015290517ffc23bfdd882b7d1ee82396bdc85e1f0fe38822e4a5c63689364cfb811bf21c0f9181900360a00190a1610b43565b60408051600160a060020a0333168152600160208201526060818301819052601b908201527fe5af86e7a081e99499e8afafefbc8ce799bbe5bd95e5a4b1e8b4a50000000000608082015290517ffc23bfdd882b7d1ee82396bdc85e1f0fe38822e4a5c63689364cfb811bf21c0f9181900360a00190a1610b43565b600092505b5050919050565b9150600090505b600954811015610c7e57600980548391908390811015610002576000918252602090912001541415610cc65760019250610c83565b600101610c9156",
 "info": {
  "source": "pragma solidity ^0.4.2;\n\n//测试类：该合约不需要迁移\n//供外部调用测试交易方法、常量方法、event的使用\ncontract Test {\n    uint age;\n\n    event SetAge(address sender, uint age);\n    function setAge(uint _age) {\n        age = _age;\n        SetAge(msg.sender, age);\n    }\n\n    function getAge()constant returns(uint) {\n        return age;\n    }\n}\n\n//工具类：该合约不需要迁移\ncontract Utils {\n\n    function stringToBytes32(string memory source)constant internal returns (bytes32 result) {\n    assembly {\n        result := mload(add(source, 32))\n      }\n    }\n\n    function bytes32ToString(bytes32 x)constant internal returns (string) {\n    bytes memory bytesString = new bytes(32);\n    uint charCount = 0;\n    for (uint j = 0; j < 32; j++) {\n        byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n        if (char != 0) {\n            bytesString[charCount] = char;\n            charCount++;\n        }\n    }\n    bytes memory bytesStringTrimmed = new bytes(charCount);\n    for (j = 0; j < charCount; j++) {\n        bytesStringTrimmed[j] = bytesString[j];\n    }\n    return string(bytesStringTrimmed);\n    }\n\n}\n\n//主合约：该合约需要迁移\ncontract Score is Utils, Test {\n\n    address owner; //合约的拥有者，银行\n    uint issuedScore; //银行已经发行的积分总数\n    uint settledScore; //银行已经清算的积分总数\n\n    struct Customer {\n        address customerAddr; //客户address\n        bytes32 phone; //客户手机\n        bytes32 password; //客户密码\n        uint score; //积分余额\n        bytes32[] buyGoods; //购买的商品数组\n    }\n\n    struct Merchant {\n        address merchantAddr; //商户address\n        bytes32 password; //商户密码\n        uint scoreAmount; //积分余额\n        bytes32[] sellGoods; //发布的商品数组\n    }\n\n    struct Good {\n        bytes32 goodId; //商品Id;\n        uint price; //价格；\n        address belong; //商品属于哪个商户address；\n    }\n\n    mapping (address=>Customer) customer; \n    mapping (bytes32=>address) customerPhone; //根据用户手机查找账户address\n    mapping (address=>Merchant) merchant; \n    mapping (bytes32=>Good) good; //根据商品Id查找该件商品\n\n    address[] customerAddrs; //已注册的客户地址数组\n    bytes32[] customerPhones; //已注册的客户手机数组\n    address[] merchants; //已注册的商户数组\n    bytes32[] goods; //已经上线的商品数组\n\n    //增加权限控制，某些方法只能由合约的创建者调用\n    modifier onlyOwner(){\n        if(msg.sender != owner) throw;\n        _;\n    }\n\n    //构造函数\n    function Score() {\n        owner = msg.sender;\n    }\n\n    //返回合约调用者地址\n    function getOwner() constant returns(address) {\n        return owner;\n    }\n\n    //注册一个客户\n    event RegisterCustomer(address sender, uint statusCode, string message);\n    function registerCustomer(address _customerAddr, \n        string _phone, \n        string _password) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        bytes32 tempPassword = stringToBytes32(_password);\n\n        //判断是否已经注册\n        if(!isCustomerAlreadyRegister(_phone)) {\n            //还未注册\n            customer[_customerAddr].customerAddr = _customerAddr;\n            customer[_customerAddr].phone = tempPhone;\n            customer[_customerAddr].password = tempPassword;\n\n            customerPhone[tempPhone] = _customerAddr;\n            customerAddrs.push(_customerAddr);\n            customerPhones.push(tempPhone);\n            RegisterCustomer(msg.sender, 0, \"注册成功\");\n            return;\n        }\n        else {\n            RegisterCustomer(msg.sender, 1, \"该账户已经注册\");\n            return;\n        }\n    }\n\n    //登录一个客户\n    event LoginCustomer(address sender, uint statusCode, string message);\n    function loginCustomer(string _phone, \n        string _password) {\n        //判断是否已经注册\n        if(isCustomerAlreadyRegister(_phone)) {\n            //已经注册，可以进行登录操作\n            address tempAddr = customerPhone[stringToBytes32(_phone)];\n            if(stringToBytes32(_password) == customer[tempAddr].password) {\n                //登录成功\n                LoginCustomer(msg.sender, 0, \"登录成功\");\n                return;\n            }\n            else {\n                //登录失败\n                LoginCustomer(msg.sender, 1, \"密码错误，登录失败\");\n                return;\n            }\n        }\n        else {\n            //还未注册\n            LoginCustomer(msg.sender, 1, \"该用户未注册，请确认后登录\");\n            return;\n        }\n    }\n\n    //查询客户的详细信息,已登录用户调用\n    function getCustomerInfo(string _phone)constant returns(address, bytes32, uint) {\n        address tempAddr = customerPhone[stringToBytes32(_phone)];\n        return (customer[tempAddr].customerAddr, customer[tempAddr].phone, customer[tempAddr].score);\n    }\n\n\n    //注册一个商户\n    // event NewMerchant(address sender, bool isSuccess, string message);\n    // function newMerchant(address _merchantAddr) {\n\n    //     //判断是否已经注册\n    //     if(!isMerchantAlreadyRegister(_merchantAddr)) {\n    //         //还未注册\n    //         merchant[_merchantAddr].merchantAddr = _merchantAddr;\n    //         merchants.push(_merchantAddr);\n    //         NewMerchant(msg.sender, true, \"注册成功\");\n    //         return;\n    //     }\n    //     else {\n    //         NewMerchant(msg.sender, false, \"该账户已经注册\");\n    //         return;\n    //     }\n    // }\n\n    //判断一个客户是否已经注册\n    function isCustomerAlreadyRegister(string _phone)internal returns(bool) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        for(uint i = 0; i < customerPhones.length; i++) {\n            if(customerPhones[i] == tempPhone) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //判断一个商户是否已经注册\n    // function isMerchantAlreadyRegister(address _merchantAddr)internal returns(bool) {\n    //     for(uint i = 0; i < merchants.length; i++) {\n    //         if(merchants[i] == _merchantAddr) {\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n\n\n    //银行发送积分给客户,只能被银行调用，且只能发送给客户\n    event IssueScore(address sender, uint statusCode, string message);\n    function issueScore(string _phone, \n        uint _score)onlyOwner {\n        bytes32 tempPhone = stringToBytes32(_phone);\n\n\n        if(isCustomerAlreadyRegister(_phone)) {\n            address tempAddr = customerPhone[tempPhone];\n            //已经注册\n            issuedScore += _score;\n            customer[tempAddr].score += _score;\n            IssueScore(msg.sender, 0, \"发行积分成功\");\n            return;\n        }\n        else {\n            //还没注册\n            IssueScore(msg.sender, 1, \"该账户未注册，发行积分失败\");\n            return;\n        }\n    }\n\n    //两个账户转移积分，任意两个账户之间都可以转移，客户商户都调用该方法\n    //_senderType表示调用者类型，0表示客户，1表示商户\n    event TransferScore(address sender, uint statusCode, string message);\n    function transferScore(uint _senderType, \n        string _sender, \n        string _receiver, \n        uint _score) {\n        // if(!isCustomerAlreadyRegister(_receiver) && !isMerchantAlreadyRegister(_receiver));  如果加入商户，则执行这个判断\n        if(!isCustomerAlreadyRegister(_receiver)){\n            //目的账户不存在\n            TransferScore(msg.sender, 1, \"目的账户不存在，请确认后再转移！\");\n            return;\n        }\n\n        bytes32 tempSenderPhone = stringToBytes32(_sender);\n        bytes32 tempReceivedPhone = stringToBytes32(_receiver);\n        \n        if(_senderType == 0) {\n            //客户转移\n            address tempSenderAddr = customerPhone[tempSenderPhone];\n            if(customer[tempSenderAddr].score >= _score) {\n                customer[tempSenderAddr].score -= _score;\n        \n                if(isCustomerAlreadyRegister(_receiver)) {\n                    //目的地址是客户\n                    address tempReceivedAddr = customerPhone[tempReceivedPhone];\n                    customer[tempReceivedAddr].score += _score;\n                }else {\n                    //目的地址是商户\n                    // address tempReceivedAddr = customerPhone[tempReceivedPhone];\n                    // merchant[_receiver].score += _score;\n                }\n                TransferScore(msg.sender, 0, \"积分转让成功！\");\n                return;\n            }\n            else {\n                TransferScore(msg.sender, 1, \"你的积分余额不足，转让失败！\");\n                return;\n            }\n        }\n        // else {\n        //     //商户转移\n        //     if(merchant[_sender].scoreAmount >= _amount) {\n        //         merchant[_sender].scoreAmount -= _amount;\n        //         if(isCustomerAlreadyRegister(_receiver)) {\n        //             //目的地址是客户\n        //             customer[_receiver].scoreAmount += _amount;\n        //         }else {\n        //             merchant[_receiver].scoreAmount += _amount;\n        //         }\n        //         TransferScore(msg.sender, \"积分转让成功！\");\n        //         return;\n        //     }\n        //     else {\n        //         TransferScore(msg.sender, \"你的积分余额不足，转让失败！\");\n        //         return;\n        //     }\n        // }\n    }\n\n    //银行查找已经发行的积分总数\n    function getIssuedScore()constant returns(uint) {\n        return issuedScore;\n    }\n\n    //（1）商户添加一件商品:（1）（2）（3）方法分拆解决out of gas\n    // event AddGood(address sender, bool isSuccess, string message);\n    // function addGood(address _merchantAddr, string _goodId, uint _price) {\n    //     bytes32 tempId = stringToBytes32(_goodId);\n\n    //     //首先判断该商品Id是否已经存在\n    //     if(!isGoodAlreadyAdd(tempId)) {\n    //         good[tempId].goodId = tempId;\n    //         good[tempId].price = _price;\n    //         good[tempId].belong = _merchantAddr;\n    //         AddGood(msg.sender, true, \"创建商品成功\");\n    //         return;\n    //     }\n    //     else {\n    //         AddGood(msg.sender, false, \"该件商品已经添加，请确认后操作\");\n    //         return;\n    //     }\n    // }\n\n    //（2）商户添加一件商品\n    // event PutGoodToArray(address sender, string message);\n    // function putGoodToArray(string _goodId) {\n    //     goods.push(stringToBytes32(_goodId));  \n    //     PutGoodToArray(msg.sender, \"添加到全局商品数组成功\");\n    // }\n\n    //（3）商户添加一件商品\n    // event PutGoodToMerchant(address sender, string message);\n    // function putGoodToMerchant(address _merchantAddr, string _goodId) {\n    //      merchant[_merchantAddr].sellGoods.push(stringToBytes32(_goodId)); \n    //      PutGoodToMerchant(msg.sender, \"添加到商户的商品数组成功\");\n    // }\n\n    //商户查找自己的商品数组\n    // function getGoodsByMerchant(address _merchantAddr)constant returns(bytes32[]) {\n    //     return merchant[_merchantAddr].sellGoods;\n    // }\n\n    //（1）用户用积分购买一件商品,拆分方法，解决out of gas\n    // event BuyGood(address sender, bool isSuccess, string message);\n    // function buyGood(address _customerAddr, string _goodId) {\n    //     //首先判断输入的商品Id是否存在\n    //     bytes32 tempId = stringToBytes32(_goodId);\n    //     if(isGoodAlreadyAdd(tempId)) {\n    //         //该件商品已经添加，可以购买\n    //         if(customer[_customerAddr].scoreAmount < good[tempId].price) {\n    //             BuyGood(msg.sender, false, \"余额不足，购买商品失败\");\n    //             return;\n    //         }\n    //         else {\n    //             //对这里的方法抽取      \n    //             BuyGood(msg.sender, true, \"购买商品成功\");\n    //             return;\n    //         }\n    //     }\n    //     else {\n    //         //没有这个Id的商品\n    //         BuyGood(msg.sender, false, \"输入商品Id不存在，请确定后购买\");\n    //         return;\n    //     }\n    // }\n\n    //（2）对上面buyGood()方法的拆分\n    // function buyGoodSuccess(address _customerAddr, string _goodId) {\n    //      bytes32 tempId = stringToBytes32(_goodId);\n    //      customer[_customerAddr].scoreAmount -= good[tempId].price;\n    //      merchant[good[tempId].belong].scoreAmount += good[tempId].price;\n    //      customer[_customerAddr].buyGoods.push(tempId);\n    // }\n\n    //客户查找自己的商品数组\n    // function getGoodsByCustomer(address _customerAddr)constant returns(bytes32[]) {\n    //     return customer[_customerAddr].buyGoods;\n    // }\n\n    //首先判断输入的商品Id是否存在\n    // function isGoodAlreadyAdd(bytes32 _goodId)internal returns(bool) {\n    //     for(uint i = 0; i < goods.length; i++) {\n    //         if(goods[i] == _goodId) {\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n}\n\n\n\n\n\n\n\n",
  "language": "Solidity",
  "languageVersion": "0",
  "compilerVersion": "0.4.4+commit.4633f3de.Emscripten.clang",
  "abiDefinition": [
   {
    "constant": true,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     }
    ],
    "name": "getCustomerInfo",
    "outputs": [
     {
      "name": "",
      "type": "address"
     },
     {
      "name": "",
      "type": "bytes32"
     },
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_score",
      "type": "uint256"
     }
    ],
    "name": "issueScore",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_customerAddr",
      "type": "address"
     },
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "registerCustomer",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getOwner",
    "outputs": [
     {
      "name": "",
      "type": "address"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getAge",
    "outputs": [
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_age",
      "type": "uint256"
     }
    ],
    "name": "setAge",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_senderType",
      "type": "uint256"
     },
     {
      "name": "_sender",
      "type": "string"
     },
     {
      "name": "_receiver",
      "type": "string"
     },
     {
      "name": "_score",
      "type": "uint256"
     }
    ],
    "name": "transferScore",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getIssuedScore",
    "outputs": [
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "loginCustomer",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "inputs": [],
    "type": "constructor"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "RegisterCustomer",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "LoginCustomer",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "IssueScore",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "TransferScore",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "age",
      "type": "uint256"
     }
    ],
    "name": "SetAge",
    "type": "event"
   }
  ],
  "userDoc": {
   "methods": {}
  },
  "developerDoc": {
   "methods": {}
  }
 }
}