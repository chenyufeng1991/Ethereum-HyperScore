{
 "code": "606060405260018054600160a060020a0319166c0100000000000000000000000033810204179055612563806100356000396000f3606060405236156100e55760e060020a60003504631d407f1281146100ea5780632bfbebc31461014b57806339ca5ad0146101ab5780633c4f5f211461028b5780635a2cfb91146102f45780635b30c36914610354578063701eea4a146103ef57806381f946561461049257806387621f261461052d578063893d20e81461058f578063967e6e65146105a7578063a119b1da146105b7578063a3a6570c14610652578063bf74278a146106f5578063d5dcf1271461075e578063d94c76a2146107b4578063da81542614610860578063e0dde77614610913578063fe7aa153146109b1575b610002565b3461000257610a496004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650509335935050505060006000610b20845b6020015190565b3461000257610a4b6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050506000808080600581610c8287610144565b3461000257610a496004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f8101839004830284018301909452838352979998604498929750919091019450909250829150840183828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897606497919650602491909101945090925082915084018382808284375094965050933593505050506000600060006000610cce88610144565b3461000257610a736004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050506040805160208101909152600080825280610f2e84610144565b3461000257610a4b6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050506000808080600781610fb087610144565b346100025760408051602060046024803582810135601f8101859004850286018501909652858552610a499583359593946044949392909201918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897606497919650602491909101945090925082915084018382808284375094965050505050505060006000610ff884610144565b3461000257610a496004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496505050505050506000611207835b6000600060006124db84610144565b346100025760408051602060046024803582810135601f8101859004850286018501909652858552610a499583359593946044949392909201918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a019093528282529698976064979196506024919091019450909250829150840183828082843750949650505050505050600060006113ec84610144565b3461000257610abd6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750949650505050505050600080808080806009816115f889610144565b3461000257610af2600154600160a060020a03165b90565b3461000257610b0e6000546105a4565b346100025760408051602060046024803582810135601f8101859004850286018501909652858552610a499583359593946044949392909201918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a0190935282825296989760649791965060249190910194509092508291508401838280828437509496505050505050506000600061164984610144565b3461000257610a496004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496505050505050506000611855835b60006000600061249784610144565b3461000257610a736004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496505050505050506040805160208101909152600080825280611a6584610144565b346100025760043560008190556040805133600160a060020a03168152602081018390528151610a4993927fc890294a68097562641143813b7ae9e39c85e43d49eefd10381cb4458c0ebcf5928290030190a150565b346100025760408051602060046024803582810135601f8101859004850286018501909652858552610a499583359593946044949392909201918190840183828082843750506040805160209735808a0135601f81018a90048a0283018a01909352828252969897606497919650602491909101945090925082915084018382808284375094965050933593505050506000600060006000611ae2865b60006000600061251f84610144565b3461000257610a496004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f8101839004830284018301909452838352979998604498929750919091019450909250829150840183828082843750949650509335935050505060015460009081908190819033600160a060020a03908116911614611e0057610002565b3461000257610a496004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496505050505050506000600060006000611f9f85610144565b3461000257610a496004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f8101839004830284018301909452838352979998604498929750919091019450909250829150840183828082843750949650505050505050600061226683610851565b005b60408051600160a060020a039094168452602084019290925282820152519081900360600190f35b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019250505060405180910390f35b60408051600160a060020a03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b60408051600160a060020a039092168252519081900360200190f35b60408051918252519081900360200190f35b600081815260076020908152604080832054600160a060020a03168084526006909252909120600301549193509150839010610bf757600160a060020a03808216600090815260066020908152604080832060039081018054899003905580548801905580513390941684529083019190915260608282018190526018908301527fe59586e688b7e7a7afe58886e6b885e7ae97e68890e58a9f00000000000000006080830152517ff8517e751d4b738aaae0c91d8096c0d56fb3846b03afdb96ff2f53da3ccc01e69181900360a00190a1610c7c565b60408051600160a060020a03331681526001602082015260608183018190526021908201527fe7a7afe58886e4bd99e9a29de4b88de8b6b3efbc8ce6b885e7ae97e5a4b1e8b4608082015260f860020a60a50260a082015290517ff8517e751d4b738aaae0c91d8096c0d56fb3846b03afdb96ff2f53da3ccc01e69181900360c00190a15b50505050565b81526020808201929092526040908101600090812054600160a060020a03908116808352600490945291902080546001820154600390920154921696509450925090505b509193909250565b9350610cd987610144565b9250610ce486610144565b600085815260076020526040902054909250600160a060020a03169050610d15875b60006000600061244a84610144565b1515610d98576000838152600a6020526040902083815560018082018490556002820187905560039091018054600160a060020a031916606060020a84810204179055601180549182018082559091908281838015829011610e4057600083815260209020610e409181019083015b80821115610e975760008155600101610d84565b60408051600160a060020a0333168152600160208201526060818301819052602d908201527fe8afa5e4bbb6e59586e59381e5b7b2e7bb8fe6b7bbe58aa0efbc8ce8afb7e7a160808201527faee8aea4e5908ee6938de4bd9c0000000000000000000000000000000000000060a082015290517fb1a692c428be4a37a86c9c553921a70aa647a6dac8dec661ffa28f95c4cf815e9181900360c00190a15b5050505050505050565b5050506000928352506020808320909101859055600160a060020a038316825260069052604090206004018054600181018083558281838015829011610e9b57600083815260209020610e9b918101908301610d84565b5090565b505050919090600052602060002090016000508490555060408051600160a060020a03331681526000602082015260608183018190526018908201527fe59586e688b7e6b7bbe58aa0e59586e59381e68890e58a9f0000000000000000608082015290517fb1a692c428be4a37a86c9c553921a70aa647a6dac8dec661ffa28f95c4cf815e9181900360a00190a1610e36565b600081815260056020908152604080832054600160a060020a031680845260048084529382902090930180548251818502810185019093528083529496509294509290830182828015610fa157602002820191906000526020600020905b81548152600190910190602001808311610f8c575b505050505092505b5050919050565b81526020808201929092526040908101600090812054600160a060020a0390811680835260069094529190208054600182015460039092015492169650945092509050610cc6565b915061100383610144565b905061100e846106e6565b15156110a057600160a060020a03851660009081526008602090815260408083208054606060020a808b0204600160a060020a0319918216811783556001808401899055600290930187905587865260099094529190932080549091169091179055600f8054918201808255909190828183801582901161111f5760008381526020902061111f918101908301610d84565b60408051600160a060020a03331681526001602082015260608183018190526018908201527fe8afa5e7aea1e79086e59198e5b7b2e7bb8fe6b3a8e5868c0000000000000000608082015290517fc2adefb3819ea9c5f9200c21ff3b6703ace3345de040414e19558eaeefd174379181900360a00190a15b5050505050565b5050506000928352506020909120018054600160a060020a031916606060020a878102041790556010805460018101808355828183801582901161117457600083815260209020611174918101908301610d84565b505050919090600052602060002090016000508390555060408051600160a060020a03331681526000602082015260608183018190526015908201527fe7aea1e79086e59198e6b3a8e5868ce68890e58a9f0000000000000000000000608082015290517fc2adefb3819ea9c5f9200c21ff3b6703ace3345de040414e19558eaeefd174379181900360a00190a1611118565b1561121957600760006112a985610144565b60408051600160a060020a03331681526001602082015260608183018190526027908201527fe8afa5e59586e688b7e69caae6b3a8e5868cefbc8ce8afb7e7a1aee8aea4e590608082015260c860020a668ee799bbe5bd950260a082015290517fb8c04877a072320a15792d3a3dd2b8bd59ba158565ea7a3cdedec6efb907fb909181900360c00190a15b505050565b81526020808201929092526040908101600090812054600160a060020a0316808252600690935220600201549091506112e183610144565b14156113635760408051600160a060020a03331681526000602082015260608183018190526012908201527fe59586e688b7e799bbe5bd95e68890e58a9f0000000000000000000000000000608082015290517fb8c04877a072320a15792d3a3dd2b8bd59ba158565ea7a3cdedec6efb907fb909181900360a00190a16112a4565b60408051600160a060020a03331681526001602082015260608183018190526021908201527fe59586e688b7e5af86e7a081e99499e8afafefbc8ce799bbe5bd95e5a4b1e8b4608082015260f860020a60a50260a082015290517fb8c04877a072320a15792d3a3dd2b8bd59ba158565ea7a3cdedec6efb907fb909181900360c00190a16112a4565b91506113f783610144565b905061140284610851565b151561149457600160a060020a03851660009081526004602090815260408083208054606060020a808b0204600160a060020a0319918216811783556001808401899055600290930187905587865260059094529190932080549091169091179055600b8054918201808255909190828183801582901161151057600083815260209020611510918101908301610d84565b60408051600160a060020a03331681526001602082015260608183018190526015908201527fe8afa5e794a8e688b7e5b7b2e7bb8fe6b3a8e5868c0000000000000000000000608082015290517fab417f3b6ef24351da0631fd01c896916487aaf213f56c849dec53916c45dd019181900360a00190a1611118565b5050506000928352506020909120018054600160a060020a031916606060020a87810204179055600c805460018101808355828183801582901161156557600083815260209020611565918101908301610d84565b505050919090600052602060002090016000508390555060408051600160a060020a03331681526000602082015260608183018190526012908201527fe794a8e688b7e6b3a8e5868ce68890e58a9f0000000000000000000000000000608082015290517fab417f3b6ef24351da0631fd01c896916487aaf213f56c849dec53916c45dd019181900360a00190a1611118565b81526020808201929092526040908101600090812054600160a060020a039081168252600890935220805460018201546003928301546002549354929094169b909a50929850909650945092505050565b915061165483610144565b905061165f84610483565b15156116f157600160a060020a03851660009081526006602090815260408083208054606060020a808b0204600160a060020a0319918216811783556001808401899055600290930187905587865260079094529190932080549091169091179055600d8054918201808255909190828183801582901161176d5760008381526020902061176d918101908301610d84565b60408051600160a060020a03331681526001602082015260608183018190526015908201527fe8afa5e59586e688b7e5b7b2e7bb8fe6b3a8e5868c0000000000000000000000608082015290517f7f2df18e7e9615186dd81b73b44892e19883198a0fb6c64f6e4bd95ea2048d9e9181900360a00190a1611118565b5050506000928352506020909120018054600160a060020a031916606060020a87810204179055600e80546001810180835582818380158290116117c2576000838152602090206117c2918101908301610d84565b505050919090600052602060002090016000508390555060408051600160a060020a03331681526000602082015260608183018190526012908201527fe59586e688b7e6b3a8e5868ce68890e58a9f0000000000000000000000000000608082015290517f7f2df18e7e9615186dd81b73b44892e19883198a0fb6c64f6e4bd95ea2048d9e9181900360a00190a1611118565b15611867576009600061190985610144565b60408051600160a060020a0333168152600160208201526060818301819052602a908201527fe8afa5e7aea1e79086e59198e69caae6b3a8e5868cefbc8ce8afb7e7a1aee8ae60808201527fa4e5908ee799bbe5bd950000000000000000000000000000000000000000000060a082015290517faa6674954319498c6e6637dcd4bb7348cacb45155ff4bddf74535a11a3a6b16a9181900360c00190a16112a4565b81526020808201929092526040908101600090812054600160a060020a03168082526008909352206002015490915061194183610144565b14156119c35760408051600160a060020a03331681526000602082015260608183018190526015908201527fe7aea1e79086e59198e799bbe5bd95e68890e58a9f0000000000000000000000608082015290517faa6674954319498c6e6637dcd4bb7348cacb45155ff4bddf74535a11a3a6b16a9181900360a00190a16112a4565b60408051600160a060020a03331681526001602082015260608183018190526024908201527fe7aea1e79086e59198e5af86e7a081e99499e8afafefbc8ce799bbe5bd95e5a460808201527fb1e8b4a50000000000000000000000000000000000000000000000000000000060a082015290517faa6674954319498c6e6637dcd4bb7348cacb45155ff4bddf74535a11a3a6b16a9181900360c00190a16112a4565b600081815260076020908152604080832054600160a060020a0316808452600683529281902060040180548251818502810185019093528083529496509294509290830182828015610fa1576020028201919060005260206000209081548152600190910190602001808311610f8c575b50505050509250610fa9565b158015611af55750611af386610483565b155b15611b9c5760408051600160a060020a03331681526001602082015260608183018190526030908201527fe79baee6a087e8b4a6e688b7e4b88de5ad98e59ca8efbc8ce8afb7e7a1aee8ae60808201527fa4e5908ee5868de8bdace7a7bbefbc810000000000000000000000000000000060a082015290517fb80b50d9dbf9dcdf5d67a554d3d49740fd2aa0041e7c954bed8210007f92caf09181900360c00190a1610e36565b611ba587610144565b9350611bb086610144565b9250871515611c1857600084815260056020908152604080832054600160a060020a0316808452600490925290912060030154909250859010611c7757600160a060020a038216600090815260046020526040902060030180548690039055611d1986610851565b600084815260076020908152604080832054600160a060020a0316808452600690925290912060030154909250859010611c7757600160a060020a038216600090815260066020526040902060030180548690039055611d1986610851565b60408051600160a060020a0333168152600160208201526060818301819052602a908201527fe4bda0e79a84e7a7afe58886e4bd99e9a29de4b88de8b6b3efbc8ce8bdace8ae60808201527fa9e5a4b1e8b4a5efbc810000000000000000000000000000000000000000000060a082015290517fb80b50d9dbf9dcdf5d67a554d3d49740fd2aa0041e7c954bed8210007f92caf09181900360c00190a1610e36565b15611d535750600082815260056020908152604080832054600160a060020a03168084526004909252909120600301805486019055611d84565b50600082815260076020908152604080832054600160a060020a031680845260069092529091206003018054860190555b60408051600160a060020a03331681526000602082015260608183018190526015908201527fe7a7afe58886e8bdace8aea9e68890e58a9fefbc810000000000000000000000608082015290517fb80b50d9dbf9dcdf5d67a554d3d49740fd2aa0041e7c954bed8210007f92caf09181900360a00190a1610e36565b611e0987610144565b9350611e1486610144565b9250611e1f86610851565b15611ef857505060008281526009602090815260408083205484845260058352818420546002805489019055600160a060020a0390811680865260048552838620600390810180548b0190559282168087526008865284872090930180548a01905583513390921682529381019490945260608483018190526012908501527fe58f91e8a18ce7a7afe58886e68890e58a9f00000000000000000000000000006080850152905190927f66e2c8d88cb01a2287c732f9e7cd9bcd951ff8a60f2e7fcaf38fd9b424d45784919081900360a00190a1611f96565b60408051600160a060020a03331681526001602082015260608183018190526027908201527fe8afa5e8b4a6e688b7e69caae6b3a8e5868cefbc8ce58f91e8a18ce7a7afe58860808201527f86e5a4b1e8b4a50000000000000000000000000000000000000000000000000060a082015290517f66e2c8d88cb01a2287c732f9e7cd9bcd951ff8a60f2e7fcaf38fd9b424d457849181900360c00190a15b50505050505050565b9350611faa86610144565b600081815260056020908152604080832054888452600a90925290912060030154919450600160a060020a039081169350169050611fe785610d06565b156120a4576000848152600a6020908152604080832060020154600160a060020a03861684526004909252909120600301541061214a576000848152600a602090815260408083206002018054600160a060020a0380881680875260048087528588206003808201805496909603909555945492891688526006875294872090920180549091019055909352908190520180546001810180835582818380158290116121d3576000838152602090206121d3918101908301610d84565b60408051600160a060020a0333168152600160208201526060818301819052602c908201527fe8be93e585a5e59586e593814964e4b88de5ad98e59ca8efbc8ce8afb7e7a1ae60808201527fe5ae9ae5908ee8b4ade4b9b0000000000000000000000000000000000000000060a082015290517f6b0dd95e5f930cd2593c0f2d81ac178e5bbe71422db8c5007a1334555d0ceb0c9181900360c00190a15b505050505050565b60408051600160a060020a03331681526001602082015260608183018190526021908201527fe4bd99e9a29de4b88de8b6b3efbc8ce8b4ade4b9b0e59586e59381e5a4b1e8b4608082015260f860020a60a50260a082015290517f6b0dd95e5f930cd2593c0f2d81ac178e5bbe71422db8c5007a1334555d0ceb0c9181900360c00190a1612142565b505050919090600052602060002090016000508590555060408051600160a060020a03331681526000602082015260608183018190526018908201527fe794a8e688b7e8b4ade4b9b0e59586e59381e68890e58a9f0000000000000000608082015290517f6b0dd95e5f930cd2593c0f2d81ac178e5bbe71422db8c5007a1334555d0ceb0c9181900360a00190a1612142565b15612278576005600061230785610144565b60408051600160a060020a03331681526001602082015260608183018190526027908201527fe8afa5e794a8e688b7e69caae6b3a8e5868cefbc8ce8afb7e7a1aee8aea4e590608082015260c860020a668ee799bbe5bd950260a082015290517ffc23bfdd882b7d1ee82396bdc85e1f0fe38822e4a5c63689364cfb811bf21c0f9181900360c00190a16112a4565b81526020808201929092526040908101600090812054600160a060020a03168082526004909352206002015490915061233f83610144565b14156123c15760408051600160a060020a03331681526000602082015260608183018190526012908201527fe794a8e688b7e799bbe5bd95e68890e58a9f0000000000000000000000000000608082015290517ffc23bfdd882b7d1ee82396bdc85e1f0fe38822e4a5c63689364cfb811bf21c0f9181900360a00190a16112a4565b60408051600160a060020a03331681526001602082015260608183018190526021908201527fe794a8e688b7e5af86e7a081e99499e8afafefbc8ce799bbe5bd95e5a4b1e8b4608082015260f860020a60a50260a082015290517ffc23bfdd882b7d1ee82396bdc85e1f0fe38822e4a5c63689364cfb811bf21c0f9181900360c00190a16112a4565b9150600090505b6011548110156124865760118054839190839081101561000257600091825260209091200154141561248f5760019250610fa9565b60009250610fa9565b600101612451565b9150600090505b601054811015612486576010805483919083908110156100025760009182526020909120015414156124d35760019250610fa9565b60010161249e565b9150600090505b600e5481101561248657600e805483919083908110156100025760009182526020909120015414156125175760019250610fa9565b6001016124e2565b9150600090505b600c5481101561248657600c8054839190839081101561000257600091825260209091200154141561255b5760019250610fa9565b60010161252656",
 "info": {
  "source": "pragma solidity ^0.4.2;\n\n//测试类：该合约不需要迁移\n//供外部调用测试交易方法、常量方法、event的使用\ncontract Test {\n    uint age;\n\n    event SetAge(address sender, uint age);\n    function setAge(uint _age) {\n        age = _age;\n        SetAge(msg.sender, age);\n    }\n\n    function getAge()constant returns(uint) {\n        return age;\n    }\n}\n\n//工具类：该合约不需要迁移\ncontract Utils {\n\n    function stringToBytes32(string memory source)constant internal returns (bytes32 result) {\n    assembly {\n        result := mload(add(source, 32))\n      }\n    }\n\n    function bytes32ToString(bytes32 x)constant internal returns (string) {\n    bytes memory bytesString = new bytes(32);\n    uint charCount = 0;\n    for (uint j = 0; j < 32; j++) {\n        byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n        if (char != 0) {\n            bytesString[charCount] = char;\n            charCount++;\n        }\n    }\n    bytes memory bytesStringTrimmed = new bytes(charCount);\n    for (j = 0; j < charCount; j++) {\n        bytesStringTrimmed[j] = bytesString[j];\n    }\n    return string(bytesStringTrimmed);\n    }\n\n}\n\n//主合约：该合约需要迁移\ncontract Score is Utils, Test {\n\n    address owner; //合约的拥有者，银行\n    uint totalIssuedScore; //银行发行的积分总数\n    uint totalSettledScore; //银行已经清算的积分总数\n   \n    struct Manager {\n        address managerAddr; //银行管理员address\n        bytes32 phone; //管理员手机\n        bytes32 password; //管理员密码\n        uint issuedScore; //该管理员发行的积分总数\n    }\n\n    struct Customer {\n        address customerAddr; //客户address\n        bytes32 phone; //客户手机\n        bytes32 password; //客户密码\n        uint score; //积分余额\n        bytes32[] buyGoods; //购买的商品数组\n    }\n\n    struct Merchant {\n        address merchantAddr; //商户address\n        bytes32 phone; //商户手机\n        bytes32 password; //商户密码\n        uint score; //积分余额\n        bytes32[] sellGoods; //发布的商品数组\n    }\n\n    struct Good {\n        bytes32 goodId; //商品Id;\n        bytes32 goodName; //商品名称；\n        uint goodPrice; //价格；\n        address merchantAddr; //商品属于哪个商户address；\n    }\n\n    mapping (address=>Customer) customer; \n    mapping (bytes32=>address) customerPhone; //根据用户手机查找账户address\n\n    mapping (address=>Merchant) merchant; \n    mapping (bytes32=>address) merchantPhone; //根据商户手机查找账户address\n\n    mapping (address=>Manager) manager;\n    mapping (bytes32=>address) managerPhone; //根据管理员手机查找账户address\n\n    mapping (bytes32=>Good) good; //根据商品Id查找该件商品\n\n    address[] customerAddrs; //已注册的客户地址数组\n    bytes32[] customerPhones; //已注册的客户手机数组\n\n    address[] merchantAddrs; //已注册的商户地址数组\n    bytes32[] merchantPhones; //已注册的商户手机数组\n\n    address[] managerAddrs; //已注册的管理员地址数组\n    bytes32[] managerPhones; //已注册的管理员手机数组\n\n    bytes32[] goods; //已经上线的商品id数组\n\n    //增加权限控制，某些方法只能由合约的创建者调用\n    modifier onlyOwner(){\n        if(msg.sender != owner) throw;\n        _;\n    }\n\n    //构造函数\n    function Score() {\n        owner = msg.sender;\n    }\n\n    //返回合约调用者地址\n    function getOwner() constant returns(address) {\n        return owner;\n    }\n\n    //注册一个银行管理员\n    event RegisterManager(address sender, uint statusCode, string message);\n    function registerManager(address _managerAddr, \n        string _phone, \n        string _password) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        bytes32 tempPassword = stringToBytes32(_password);\n\n        //判断该账号是否已经注册\n        if(!isManagerAlreadyRegister(_phone)) {\n            //还未注册\n            manager[_managerAddr].managerAddr = _managerAddr;\n            manager[_managerAddr].phone = tempPhone;\n            manager[_managerAddr].password = tempPassword;\n\n            managerPhone[tempPhone] = _managerAddr;\n            managerAddrs.push(_managerAddr);\n            managerPhones.push(tempPhone);\n\n            RegisterManager(msg.sender, 0, \"管理员注册成功\");\n            return;\n        }\n        else {\n            //已经注册\n            RegisterManager(msg.sender, 1, \"该管理员已经注册\");\n            return;\n        }\n    }\n\n    //登录一个银行管理员\n    event LoginManager(address sender, uint statusCode, string message);\n    function loginManager(string _phone, \n        string _password) {\n        //判断是否已经注册\n        if(isManagerAlreadyRegister(_phone)) {\n            //已经注册，可以进行登录操作\n            address tempAddr = managerPhone[stringToBytes32(_phone)];\n            if(stringToBytes32(_password) == manager[tempAddr].password) {\n                //登录成功\n                LoginManager(msg.sender, 0, \"管理员登录成功\");\n                return;\n            }\n            else {\n                //登录失败\n                LoginManager(msg.sender, 1, \"管理员密码错误，登录失败\");\n                return;\n            }\n        }\n        else {\n            //还未注册\n            LoginManager(msg.sender, 1, \"该管理员未注册，请确认后登录\");\n            return;\n        }\n    }\n\n    //查询银行管理员的详细信息,已登录的管理员调用\n    function getManagerInfo(string _phone)constant returns(address, bytes32, uint, uint, uint) {\n        address tempAddr = managerPhone[stringToBytes32(_phone)];\n        return (manager[tempAddr].managerAddr, manager[tempAddr].phone, manager[tempAddr].issuedScore, totalIssuedScore, totalSettledScore);\n    }\n\n    //注册一个客户\n    event RegisterCustomer(address sender, uint statusCode, string message);\n    function registerCustomer(address _customerAddr, \n        string _phone, \n        string _password) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        bytes32 tempPassword = stringToBytes32(_password);\n\n        //判断是否已经注册\n        if(!isCustomerAlreadyRegister(_phone)) {\n            //还未注册\n            customer[_customerAddr].customerAddr = _customerAddr;\n            customer[_customerAddr].phone = tempPhone;\n            customer[_customerAddr].password = tempPassword;\n\n            customerPhone[tempPhone] = _customerAddr;\n            customerAddrs.push(_customerAddr);\n            customerPhones.push(tempPhone);\n            RegisterCustomer(msg.sender, 0, \"用户注册成功\");\n            return;\n        }\n        else {\n            RegisterCustomer(msg.sender, 1, \"该用户已经注册\");\n            return;\n        }\n    }\n\n    //登录一个客户\n    event LoginCustomer(address sender, uint statusCode, string message);\n    function loginCustomer(string _phone, \n        string _password) {\n        //判断是否已经注册\n        if(isCustomerAlreadyRegister(_phone)) {\n            //已经注册，可以进行登录操作\n            address tempAddr = customerPhone[stringToBytes32(_phone)];\n            if(stringToBytes32(_password) == customer[tempAddr].password) {\n                //登录成功\n                LoginCustomer(msg.sender, 0, \"用户登录成功\");\n                return;\n            }\n            else {\n                //登录失败\n                LoginCustomer(msg.sender, 1, \"用户密码错误，登录失败\");\n                return;\n            }\n        }\n        else {\n            //还未注册\n            LoginCustomer(msg.sender, 1, \"该用户未注册，请确认后登录\");\n            return;\n        }\n    }\n\n    //查询客户的详细信息,已登录的用户调用\n    function getCustomerInfo(string _phone)constant returns(address, bytes32, uint) {\n        address tempAddr = customerPhone[stringToBytes32(_phone)];\n        return (customer[tempAddr].customerAddr, customer[tempAddr].phone, customer[tempAddr].score);\n    }\n\n\n    //注册一个商户\n    event RegisterMerchant(address sender, uint statusCode, string message);\n    function registerMerchant(address _merchantAddr, \n        string _phone, \n        string _password) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        bytes32 tempPassword = stringToBytes32(_password);\n\n        //判断是否已经注册\n        if(!isMerchantAlreadyRegister(_phone)) {\n            //还未注册\n            merchant[_merchantAddr].merchantAddr = _merchantAddr;\n            merchant[_merchantAddr].phone = tempPhone;\n            merchant[_merchantAddr].password = tempPassword;\n\n            merchantPhone[tempPhone] = _merchantAddr;\n            merchantAddrs.push(_merchantAddr);\n            merchantPhones.push(tempPhone);\n            RegisterMerchant(msg.sender, 0, \"商户注册成功\");\n            return;\n        }\n        else {\n            RegisterMerchant(msg.sender, 1, \"该商户已经注册\");\n            return;\n        }\n    }\n\n    //登录一个商户\n    event LoginMerchant(address sender, uint statusCode, string message);\n    function loginMerchant(string _phone, \n        string _password) {\n        //判断是否已经注册\n        if(isMerchantAlreadyRegister(_phone)) {\n            //已经注册，可以进行登录操作\n            address tempAddr = merchantPhone[stringToBytes32(_phone)];\n            if(stringToBytes32(_password) == merchant[tempAddr].password) {\n                //登录成功\n                LoginMerchant(msg.sender, 0, \"商户登录成功\");\n                return;\n            }\n            else {\n                //登录失败\n                LoginMerchant(msg.sender, 1, \"商户密码错误，登录失败\");\n                return;\n            }\n        }\n        else {\n            //还未注册\n            LoginMerchant(msg.sender, 1, \"该商户未注册，请确认后登录\");\n            return;\n        }\n    }\n\n    //查询商户的详细信息,已登录的商户调用\n    function getMerchantInfo(string _phone)constant returns(address, bytes32, uint) {\n        address tempAddr = merchantPhone[stringToBytes32(_phone)];\n        return (merchant[tempAddr].merchantAddr, merchant[tempAddr].phone, merchant[tempAddr].score);\n    }\n\n    //判断一个管理员是否已经注册\n    function isManagerAlreadyRegister(string _phone)internal returns(bool) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        for(uint i = 0; i < managerPhones.length; i++) {\n            if(managerPhones[i] == tempPhone) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //判断一个客户是否已经注册\n    function isCustomerAlreadyRegister(string _phone)internal returns(bool) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        for(uint i = 0; i < customerPhones.length; i++) {\n            if(customerPhones[i] == tempPhone) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //判断一个商户是否已经注册\n    function isMerchantAlreadyRegister(string _phone)internal returns(bool) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        for(uint i = 0; i < merchantPhones.length; i++) {\n            if(merchantPhones[i] == tempPhone) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    //管理员发送积分给客户,只能发送给客户\n    event IssueScore(address sender, uint statusCode, string message);\n    function issueScore(string _managerPhone ,\n        string _customerPhone, \n        uint _score)onlyOwner {\n        bytes32 tempManagerPhone = stringToBytes32(_managerPhone);\n        bytes32 tempCustomerPhone = stringToBytes32(_customerPhone);\n\n        if(isCustomerAlreadyRegister(_customerPhone)) {\n            //已经注册\n            address tempManagerAddr = managerPhone[tempManagerPhone];\n            address tempCustomerAddr = customerPhone[tempCustomerPhone];\n            \n            totalIssuedScore += _score;\n            customer[tempCustomerAddr].score += _score;\n            manager[tempManagerAddr].issuedScore += _score;\n            IssueScore(msg.sender, 0, \"发行积分成功\");\n            return;\n        }\n        else {\n            //还没注册\n            IssueScore(msg.sender, 1, \"该账户未注册，发行积分失败\");\n            return;\n        }\n    }\n\n    //商户和银行之间清算积分\n    event SettleScore(address sender, uint statusCode, string message);\n    function settleScore(string _phone, \n        uint _score) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        address tempAddr = merchantPhone[tempPhone];\n        if(merchant[tempAddr].score >= _score) {\n            //可以清算\n            merchant[tempAddr].score -= _score;\n            totalSettledScore += _score;\n            SettleScore(msg.sender, 0, \"商户积分清算成功\");\n            return;\n        }\n        else {\n            //余额不足，清算失败\n            SettleScore(msg.sender, 1, \"积分余额不足，清算失败\");\n            return;\n        }\n    }\n\n    //两个账户转移积分，任意两个账户之间都可以转移，客户商户都调用该方法\n    //_senderType表示调用者类型，0表示客户，1表示商户\n    event TransferScore(address sender, uint statusCode, string message);\n    function transferScore(uint _senderType, \n        string _sender, \n        string _receiver, \n        uint _score) {\n\n        if(!isCustomerAlreadyRegister(_receiver) && !isMerchantAlreadyRegister(_receiver)){\n            //目的账户不存在\n            TransferScore(msg.sender, 1, \"目标账户不存在，请确认后再转移！\");\n            return;\n        }\n\n        bytes32 tempSenderPhone = stringToBytes32(_sender);\n        bytes32 tempReceivedPhone = stringToBytes32(_receiver);\n        address tempSenderAddr;\n        address tempReceivedAddr;\n        \n        if(_senderType == 0) {\n            //客户转移\n            tempSenderAddr = customerPhone[tempSenderPhone];\n            if(customer[tempSenderAddr].score >= _score) {\n                customer[tempSenderAddr].score -= _score;\n        \n                if(isCustomerAlreadyRegister(_receiver)) {\n                    //目的地址是客户\n                    tempReceivedAddr = customerPhone[tempReceivedPhone];\n                    customer[tempReceivedAddr].score += _score;\n                }\n                else {\n                    //目的地址是商户\n                    tempReceivedAddr = merchantPhone[tempReceivedPhone];\n                    merchant[tempReceivedAddr].score += _score;\n                }\n                TransferScore(msg.sender, 0, \"积分转让成功！\");\n                return;\n            }\n            else {\n                TransferScore(msg.sender, 1, \"你的积分余额不足，转让失败！\");\n                return;\n            }\n        }\n        else {\n            //商户转移\n            tempSenderAddr = merchantPhone[tempSenderPhone];\n            if(merchant[tempSenderAddr].score >= _score) {\n                merchant[tempSenderAddr].score -= _score;\n                if(isCustomerAlreadyRegister(_receiver)) {\n                    //目的地址是客户\n                    tempReceivedAddr = customerPhone[tempReceivedPhone];\n                    customer[tempReceivedAddr].score += _score;\n                }\n                else {\n                    //目的地址是商户\n                    tempReceivedAddr = merchantPhone[tempReceivedPhone];\n                    merchant[tempReceivedAddr].score += _score;\n                }\n                TransferScore(msg.sender, 0, \"积分转让成功！\");\n                return;\n            }\n            else {\n                TransferScore(msg.sender, 1, \"你的积分余额不足，转让失败！\");\n                return;\n            }\n        }\n    }\n\n    //商户添加一件商品\n    event AddGood(address sender, uint statusCode, string message);\n    function addGood(string _phone, \n        string _goodId, \n        string _goodName, \n        uint _goodPrice) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        bytes32 tempGoodId = stringToBytes32(_goodId);\n        bytes32 tempName = stringToBytes32(_goodName);\n        address tempMerchantAddr = merchantPhone[tempPhone]; \n\n        //首先判断该商品Id是否已经存在\n        if(!isGoodAlreadyAdd(_goodId)) {\n            good[tempGoodId].goodId = tempGoodId;\n            good[tempGoodId].goodName = tempName;\n            good[tempGoodId].goodPrice = _goodPrice;\n            good[tempGoodId].merchantAddr = tempMerchantAddr;\n\n            goods.push(tempGoodId);\n            merchant[tempMerchantAddr].sellGoods.push(tempGoodId);\n            AddGood(msg.sender, 0, \"商户添加商品成功\");\n            return;\n        }\n        else {\n            AddGood(msg.sender, 1, \"该件商品已经添加，请确认后操作\");\n            return;\n        }\n    }\n\n    //首先判断输入的商品Id是否存在\n    function isGoodAlreadyAdd(string _goodId)internal returns(bool) {\n        bytes32 tempGoodId = stringToBytes32(_goodId);\n        for(uint i = 0; i < goods.length; i++) {\n            if(goods[i] == tempGoodId) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //商户查找自己的商品数组\n    function getGoodsByMerchant(string _phone)constant returns(bytes32[]) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        address tempMerchantAddr = merchantPhone[tempPhone];\n        return merchant[tempMerchantAddr].sellGoods;\n    }\n\n    //用户用积分购买一件商品\n    event BuyGood(address sender, uint statusCode, string message);\n    function buyGood(string _phone, \n        string _goodId) {\n        //首先判断输入的商品Id是否存在\n        bytes32 tempGoodId = stringToBytes32(_goodId);\n        bytes32 tempPhone = stringToBytes32(_phone);\n        address customerAddr = customerPhone[tempPhone];\n        address merchantAddr = good[tempGoodId].merchantAddr;\n        if(isGoodAlreadyAdd(_goodId)) {\n            //该件商品已经添加，可以购买\n            if(customer[customerAddr].score >= good[tempGoodId].goodPrice) {\n                customer[customerAddr].score -= good[tempGoodId].goodPrice;\n                merchant[merchantAddr].score += good[tempGoodId].goodPrice;\n                customer[customerAddr].buyGoods.push(tempGoodId);\n\n                BuyGood(msg.sender, 0, \"用户购买商品成功\");\n                return;\n            }\n            else {\n                //对这里的方法抽取      \n                BuyGood(msg.sender, 1, \"余额不足，购买商品失败\");\n                return;\n            }\n        }\n        else {\n            //没有这个Id的商品\n            BuyGood(msg.sender, 1, \"输入商品Id不存在，请确定后购买\");\n            return;\n        }\n    }\n\n    //客户查找自己已购买的商品数组\n    function getGoodsByCustomer(string _phone)constant returns(bytes32[]) {\n        bytes32 tempPhone = stringToBytes32(_phone);\n        address tempCustomerAddr = customerPhone[tempPhone];\n        return customer[tempCustomerAddr].buyGoods;\n    }\n}\n\n\n\n\n\n\n\n",
  "language": "Solidity",
  "languageVersion": "0",
  "compilerVersion": "0.4.4+commit.4633f3de.Emscripten.clang",
  "abiDefinition": [
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_score",
      "type": "uint256"
     }
    ],
    "name": "settleScore",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     }
    ],
    "name": "getCustomerInfo",
    "outputs": [
     {
      "name": "",
      "type": "address"
     },
     {
      "name": "",
      "type": "bytes32"
     },
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_goodId",
      "type": "string"
     },
     {
      "name": "_goodName",
      "type": "string"
     },
     {
      "name": "_goodPrice",
      "type": "uint256"
     }
    ],
    "name": "addGood",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     }
    ],
    "name": "getGoodsByCustomer",
    "outputs": [
     {
      "name": "",
      "type": "bytes32[]"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     }
    ],
    "name": "getMerchantInfo",
    "outputs": [
     {
      "name": "",
      "type": "address"
     },
     {
      "name": "",
      "type": "bytes32"
     },
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_managerAddr",
      "type": "address"
     },
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "registerManager",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "loginMerchant",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_customerAddr",
      "type": "address"
     },
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "registerCustomer",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     }
    ],
    "name": "getManagerInfo",
    "outputs": [
     {
      "name": "",
      "type": "address"
     },
     {
      "name": "",
      "type": "bytes32"
     },
     {
      "name": "",
      "type": "uint256"
     },
     {
      "name": "",
      "type": "uint256"
     },
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getOwner",
    "outputs": [
     {
      "name": "",
      "type": "address"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [],
    "name": "getAge",
    "outputs": [
     {
      "name": "",
      "type": "uint256"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_merchantAddr",
      "type": "address"
     },
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "registerMerchant",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "loginManager",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": true,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     }
    ],
    "name": "getGoodsByMerchant",
    "outputs": [
     {
      "name": "",
      "type": "bytes32[]"
     }
    ],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_age",
      "type": "uint256"
     }
    ],
    "name": "setAge",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_senderType",
      "type": "uint256"
     },
     {
      "name": "_sender",
      "type": "string"
     },
     {
      "name": "_receiver",
      "type": "string"
     },
     {
      "name": "_score",
      "type": "uint256"
     }
    ],
    "name": "transferScore",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_managerPhone",
      "type": "string"
     },
     {
      "name": "_customerPhone",
      "type": "string"
     },
     {
      "name": "_score",
      "type": "uint256"
     }
    ],
    "name": "issueScore",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_goodId",
      "type": "string"
     }
    ],
    "name": "buyGood",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "constant": false,
    "inputs": [
     {
      "name": "_phone",
      "type": "string"
     },
     {
      "name": "_password",
      "type": "string"
     }
    ],
    "name": "loginCustomer",
    "outputs": [],
    "payable": false,
    "type": "function"
   },
   {
    "inputs": [],
    "type": "constructor"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "RegisterManager",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "LoginManager",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "RegisterCustomer",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "LoginCustomer",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "RegisterMerchant",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "LoginMerchant",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "IssueScore",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "SettleScore",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "TransferScore",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "AddGood",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "statusCode",
      "type": "uint256"
     },
     {
      "indexed": false,
      "name": "message",
      "type": "string"
     }
    ],
    "name": "BuyGood",
    "type": "event"
   },
   {
    "anonymous": false,
    "inputs": [
     {
      "indexed": false,
      "name": "sender",
      "type": "address"
     },
     {
      "indexed": false,
      "name": "age",
      "type": "uint256"
     }
    ],
    "name": "SetAge",
    "type": "event"
   }
  ],
  "userDoc": {
   "methods": {}
  },
  "developerDoc": {
   "methods": {}
  }
 }
}